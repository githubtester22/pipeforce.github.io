"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[7347],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return u}});var t=a(7294);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=t.createContext({}),d=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),u=s,g=p["".concat(o,".").concat(u)]||p[u]||m[u]||i;return a?t.createElement(g,r(r({ref:n},c),{},{components:a})):t.createElement(g,r({ref:n},c))}));function u(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=a.length,r=new Array(i);r[0]=p;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,r[1]=l;for(var d=2;d<i;d++)r[d]=a[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2388:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var t=a(7462),s=a(3366),i=(a(7294),a(3905)),r=["components"],l={},o="Messaging",d={unversionedId:"guides/messaging",id:"guides/messaging",isDocsHomePage:!1,title:"Messaging",description:"PIPEFORCE has a built-in messaging bus where application messages can be routed between microservices based on routing",source:"@site/docs/guides/96_messaging.md",sourceDirName:"guides",slug:"/guides/messaging",permalink:"/docs/guides/messaging",editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/96_messaging.md",tags:[],version:"current",sidebarPosition:96,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Secrets",permalink:"/docs/guides/secrets"},next:{title:"Local Workspace",permalink:"/docs/guides/local-workspace"}},c=[{value:"Receiving messages",id:"receiving-messages",children:[{value:"Accessing payload",id:"accessing-payload",children:[],level:3},{value:"Using wildcard keys",id:"using-wildcard-keys",children:[],level:3}],level:2},{value:"Sending messages",id:"sending-messages",children:[],level:2}],m={toc:c};function p(e){var n=e.components,a=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"messaging"},"Messaging"),(0,i.kt)("p",null,"PIPEFORCE has a built-in messaging bus where application messages can be routed between microservices based on routing\nkeys."),(0,i.kt)("p",null,"As internal message broker RabbitMQ is used: ",(0,i.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/documentation.html"},"https://www.rabbitmq.com/documentation.html")),(0,i.kt)("p",null,"It's one of the most advanced and most widely used messaging broker in the world."),(0,i.kt)("p",null,"In order to send and receive messages to/from this messaging bus, you have two options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Develop a microservice uding a RabbitMQ client library and deploy it to PIPEFORCE using the ",(0,i.kt)("a",{parentName:"li",href:"../api/commands#servicedeploy"},"service.deploy")," command.\nFor details about writing such a microservice which produces and consumes messages, see the\nsection ",(0,i.kt)("a",{parentName:"li",href:"microservices/messaging"},"messaging and microservices"),"."),(0,i.kt)("li",{parentName:"ul"},"Write pipelines using the ",(0,i.kt)("a",{parentName:"li",href:"../api/commands#messagereceive"},"message.receive"),"\nand ",(0,i.kt)("a",{parentName:"li",href:"../api/commands#messagesend"},"essage.send")," commands.")),(0,i.kt)("p",null,"This section will cover the second part: How to write pipelines which send and receive messages to/from the messaging\nbus."),(0,i.kt)("h2",{id:"receiving-messages"},"Receiving messages"),(0,i.kt)("p",null,"To receive messages in a pipeline, you can use the command ",(0,i.kt)("a",{parentName:"p",href:"../api/commands#messagereceive"},"message.receive"),"."),(0,i.kt)("p",null,"Let's assume you have a pipeline, which sends an email like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n\n  - mail.send:\n      to: sales@company.tld\n      subject: New Sales Order\n      message: Hello, a new sales order has been created!\n")),(0,i.kt)("p",null,"Now you would like to listen for new sales orders on the messaging bus. Every time a new such sales order has been\ncreated, we would like to send this email."),(0,i.kt)("p",null,"For this, the unique messaging key ",(0,i.kt)("inlineCode",{parentName:"p"},"sales.order.created")," was defined and communicated accordingly by the integration\nteam."),(0,i.kt)("p",null,"With this information we can now extend our pipeline easily to listen to messages with this key and automatically send\nan email:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  - message.receive:\n      key: "sales.order.created"\n\n  - mail.send:\n      to: sales@company.tld\n      subject: New Sales Order\n      message: Hello, a new sales order has been created!\n')),(0,i.kt)("p",null,"As you can see, we added the command ",(0,i.kt)("inlineCode",{parentName:"p"},"message.receive")," at the very beginning. It's important that this command is always\nat the very beginning and its the only ",(0,i.kt)("inlineCode",{parentName:"p"},"message.receive")," command in the pipeline. Any command below ",(0,i.kt)("inlineCode",{parentName:"p"},"message.receive"),"\nwill then be executed every time a message with the given key appears."),(0,i.kt)("p",null,"As soon as you save the pipeline to the property store, a new queue, a binding and a consumer will be automatically\ncreated for you."),(0,i.kt)("p",null,"The pipeline then starts to listen: Any time a message with key ",(0,i.kt)("inlineCode",{parentName:"p"},"sales.order.created")," happens in the messaging bus, this\npipeline will be informed about this and executes any command below ",(0,i.kt)("inlineCode",{parentName:"p"},"message.receive"),"."),(0,i.kt)("h3",{id:"accessing-payload"},"Accessing payload"),(0,i.kt)("p",null,"It's also possible to send data with any message, it's called the ",(0,i.kt)("strong",{parentName:"p"},"payload"),"."),(0,i.kt)("p",null,"Let's assume, the data structure of such a sales order was defined by the integration team and looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "someSalesOrderId",\n  "date": "23.05.2022, 13:45",\n  "amount": "234 EUR",\n  "customer": "Acme Inc."\n}\n')),(0,i.kt)("p",null,"This is the payload of a message. Such a payload will be automatically provided in the pipeline body to all commands\nbelow ",(0,i.kt)("inlineCode",{parentName:"p"},"message.receive"),"."),(0,i.kt)("p",null,"So let's use this payload in order to send more information with our email, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'  pipeline:\n\n    - message.receive:\n        key: "sales.order.created"\n\n    - mail.send:\n        to: sales@company.tld\n        subject: "New Sales Order"\n        message: |\n          Hello, a new sales order has been created:\n          Id:       #{body.id}\n          Date:     #{body.date}\n          Amount:   #{body.amount}\n          Customer: #{body.customer}\n')),(0,i.kt)("h3",{id:"using-wildcard-keys"},"Using wildcard keys"),(0,i.kt)("p",null,"In some situations you probably would like to listen to all messages of a certain type. So lets assume you would like to\nbe informed about any sales order changes in the sales department and let's assume the integration team publishes all\nchanges to a message key structure like this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sales.order.created"),(0,i.kt)("li",{parentName:"ul"},"sales.order.closed"),(0,i.kt)("li",{parentName:"ul"},"sales.lead.created"),(0,i.kt)("li",{parentName:"ul"},"sales.lead.converted"),(0,i.kt)("li",{parentName:"ul"},"sales.incident.created")),(0,i.kt)("p",null,"Now in case you would like to listen to all messages according to sales orders, but not the other ones, you can use a\nkey pattern like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"sales.order.*"),". Note the asterisk ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," which indicates that you're interested in any message\nstarting with ",(0,i.kt)("inlineCode",{parentName:"p"},"sales.order"),". The asterisk means anything of the third section. So you will be informed about:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sales.order.created"),(0,i.kt)("li",{parentName:"ul"},"sales.order.closed")),(0,i.kt)("p",null,"But you won't be informed about:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sales.lead.created"),(0,i.kt)("li",{parentName:"ul"},"sales.lead.converted"),(0,i.kt)("li",{parentName:"ul"},"sales.incident.created")),(0,i.kt)("p",null,"This is how the pipeline could look like for example to listen to all sales order actions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n\n  - message.receive:\n      key: sales.order.*\n\n  # Commands to be executed go here...\n")),(0,i.kt)("p",null,"And in this example we listen to all messages which are related to create something in the sales department:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n\n  - message.receive:\n      key: sales.*.created\n\n  # Commands to be executed go here...\n")),(0,i.kt)("p",null,"Furthermore, you can use the hash ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," in order to indicate any level. So for example if we would like to listen to anything\ninside the sales department, we could use a pipeline like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n\n  - message.receive:\n      key: sales.#\n\n  # Commands to be executed go here...\n")),(0,i.kt)("p",null,"The hash ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," matches any level of the message key regardless of the number of periods (sections) in it."),(0,i.kt)("h2",{id:"sending-messages"},"Sending messages"),(0,i.kt)("p",null,"To send messages in a pipeline, you can use the command ",(0,i.kt)("a",{parentName:"p",href:"../api/commands#messagesend"},"message.send"),"."),(0,i.kt)("p",null,"Here is an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  - message.send: \n     key: sales.order.created\n     paloyad: |\n       {\n          "id": "someSalesOrderId",\n          "date": "23.05.2022, 13:45",\n          "amount": "234 EUR",\n          "customer": "Acme Inc."\n        }\n')),(0,i.kt)("p",null,"In case the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," is missing, the current body content of the pipeline is used as payload."),(0,i.kt)("p",null,"This sends a new message with key ",(0,i.kt)("inlineCode",{parentName:"p"},"sales.order.created")," and the given payload to the default exchange."))}p.isMDXComponent=!0}}]);
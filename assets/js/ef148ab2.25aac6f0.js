"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[494],{3905:function(e,n,a){a.d(n,{Zo:function(){return u},kt:function(){return c}});var l=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,l,t=function(e,n){if(null==e)return{};var a,l,t={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=l.createContext({}),o=function(e){var n=l.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},u=function(e){var n=o(e.components);return l.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=o(a),c=t,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return a?l.createElement(k,r(r({ref:n},u),{},{components:a})):l.createElement(k,r({ref:n},u))}));function c(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,r=new Array(i);r[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:t,r[1]=p;for(var o=2;o<i;o++)r[o]=a[o];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9221:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return u},default:function(){return d}});var l=a(7462),t=a(3366),i=(a(7294),a(3905)),r=["components"],p={},s="Pipeline Expression Language",o={unversionedId:"guides/pel",id:"guides/pel",isDocsHomePage:!1,title:"Pipeline Expression Language",description:"Introduction",source:"@site/docs/guides/pel.md",sourceDirName:"guides",slug:"/guides/pel",permalink:"/docs/guides/pel",editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/pel.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PEL Utils Reference",permalink:"/docs/guides/pel-reference"},next:{title:"Groups, Roles, Permissions",permalink:"/docs/guides/permissions"}},u=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Relational operators",id:"relational-operators",children:[{value:"Is equal (==)",id:"is-equal-",children:[{value:"Example 1",id:"example-1",children:[],level:4}],level:3},{value:"Is not equal (!=)",id:"is-not-equal-",children:[{value:"Example 1",id:"example-1-1",children:[],level:4}],level:3},{value:"Less than (&lt;)",id:"less-than-",children:[{value:"Example 1",id:"example-1-2",children:[],level:4},{value:"Example 2",id:"example-2",children:[],level:4}],level:3},{value:"Less or equal than (&lt;=)",id:"less-or-equal-than-",children:[{value:"Example 1",id:"example-1-3",children:[],level:4}],level:3},{value:"Greater than (&gt;)",id:"greater-than-",children:[{value:"Example 1",id:"example-1-4",children:[],level:4}],level:3},{value:"Greater or equal than (&gt;=)",id:"greater-or-equal-than-",children:[{value:"Example 1",id:"example-1-5",children:[],level:4}],level:3},{value:"Detect alphabetical order with &lt;, &gt;, &lt;=, &gt;=",id:"detect-alphabetical-order-with----",children:[{value:"Example 1",id:"example-1-6",children:[],level:4}],level:3},{value:"Regular expression matching (matches)",id:"regular-expression-matching-matches",children:[{value:"Example 1",id:"example-1-7",children:[],level:4}],level:3}],level:2},{value:"Logical operators",id:"logical-operators",children:[{value:"and",id:"and",children:[{value:"Example 1",id:"example-1-8",children:[],level:4}],level:3},{value:"or",id:"or",children:[{value:"Example 1",id:"example-1-9",children:[],level:4}],level:3},{value:"not (!)",id:"not-",children:[{value:"Example 1",id:"example-1-10",children:[],level:4}],level:3}],level:2},{value:"Mathematical operators",id:"mathematical-operators",children:[{value:"Addition and subtraction",id:"addition-and-subtraction",children:[{value:"Example 1 - Addition",id:"example-1---addition",children:[],level:4},{value:"Example 2 - Subtraction",id:"example-2---subtraction",children:[],level:4},{value:"Example 3 - Addition an subtraction",id:"example-3---addition-an-subtraction",children:[],level:4},{value:"Example 4 - String concatenation",id:"example-4---string-concatenation",children:[],level:4}],level:3},{value:"Multiplication and division",id:"multiplication-and-division",children:[{value:"Example 1 - Multiplication",id:"example-1---multiplication",children:[],level:4},{value:"Example 2 - Negative multiplication",id:"example-2---negative-multiplication",children:[],level:4},{value:"Example 3 - Division",id:"example-3---division",children:[],level:4},{value:"Example 4 - Modulus",id:"example-4---modulus",children:[],level:4},{value:"Example 5 - Operator precedence",id:"example-5---operator-precedence",children:[],level:4},{value:"Example 6 - Brackets",id:"example-6---brackets",children:[],level:4}],level:3}],level:2},{value:"Assignment",id:"assignment",children:[{value:"Example 1",id:"example-1-11",children:[],level:4},{value:"Example 2",id:"example-2-1",children:[],level:4}],level:2},{value:"Working with lists and maps",id:"working-with-lists-and-maps",children:[{value:"Creating a new list",id:"creating-a-new-list",children:[{value:"Example 1 - A new empty list",id:"example-1---a-new-empty-list",children:[],level:4},{value:"Example 2 - A new list with default content",id:"example-2---a-new-list-with-default-content",children:[],level:4},{value:"Example 3 - A new, nested list",id:"example-3---a-new-nested-list",children:[],level:4}],level:3},{value:"Accessing lists and arrays",id:"accessing-lists-and-arrays",children:[{value:"Example 1",id:"example-1-12",children:[],level:4}],level:3},{value:"Creating a new map / dictionary",id:"creating-a-new-map--dictionary",children:[{value:"Example 1 - A new empty map",id:"example-1---a-new-empty-map",children:[],level:4},{value:"Example 2 - A new map with default values",id:"example-2---a-new-map-with-default-values",children:[],level:4},{value:"Example 3 - A new map with later binding",id:"example-3---a-new-map-with-later-binding",children:[],level:4}],level:3},{value:"Accessing maps/dictionaries",id:"accessing-mapsdictionaries",children:[{value:"Example 1",id:"example-1-13",children:[],level:4}],level:3}],level:2},{value:"Navigating objects",id:"navigating-objects",children:[{value:"Example 1",id:"example-1-14",children:[],level:4}],level:2},{value:"Filtering",id:"filtering",children:[{value:"Selection Expression",id:"selection-expression",children:[{value:"Example 1",id:"example-1-15",children:[],level:4}],level:3},{value:"Projection Expression",id:"projection-expression",children:[{value:"Example 1",id:"example-1-16",children:[],level:4}],level:3}],level:2},{value:"PEL Utils",id:"pel-utils",children:[{value:"Example 1",id:"example-1-17",children:[],level:4},{value:"Example 2",id:"example-2-2",children:[],level:4}],level:2}],m={toc:u};function d(e){var n=e.components,a=(0,t.Z)(e,r);return(0,i.kt)("wrapper",(0,l.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pipeline-expression-language"},"Pipeline Expression Language"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Pipeline Expression Language (PEL)")," or just ",(0,i.kt)("em",{parentName:"p"},"PE (Pipeline Expression)")," is a powerful expression language that is used inside a pipeline to dynamically set values. It can be used for data mapping and to dynamically calculate, set and change values at processing time of a pipeline. This gives you a huge flexibility in your pipeline."),(0,i.kt)("p",null,"Typically a PE starts with ",(0,i.kt)("inlineCode",{parentName:"p"},"#{")," and ends with ",(0,i.kt)("inlineCode",{parentName:"p"},"}")," and is placed in the value part of headers, variables or command parameters. It uses late binding: It will be executed only in case the according entry (header, variable or command parameter) is referenced somewhere."),(0,i.kt)("p",null,"Here is a simple example of a PE, placed inside the value of a command parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{1 + 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2\n")),(0,i.kt)("p",null,"It also supports interpolation in order to use the PEL like a template language inside a text string. So string concatenation is done for you:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "Result: #{1 + 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Result: 2\n")),(0,i.kt)("p",null,"Its also possible to access the values from one of the pipeline scopes (",(0,i.kt)("inlineCode",{parentName:"p"},"headers"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"vars")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"body"),"), like shown in this example for ",(0,i.kt)("inlineCode",{parentName:"p"},"vars"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  counter: 0\npipeline:\n  - log:\n      message: "Counter = #{vars.counter + 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Counter = 1\n")),(0,i.kt)("p",null,"You can also set values using a PEL in combination with the ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  counter: 0\npipeline:\n  - set:\n      value: "#{vars.counter + 1}"\n      output: "#{vars.counter}"\n  - log:\n      message: "Counter = #{vars.counter}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Counter: 1\n")),(0,i.kt)("h2",{id:"relational-operators"},"Relational operators"),(0,i.kt)("h3",{id:"is-equal-"},"Is equal (==)"),(0,i.kt)("h4",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{2 == 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"false\n")),(0,i.kt)("h3",{id:"is-not-equal-"},"Is not equal (!=)"),(0,i.kt)("h4",{id:"example-1-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{2 != 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h3",{id:"less-than-"},"Less than (<)"),(0,i.kt)("h4",{id:"example-1-2"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{1 < 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h4",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{0.5 < 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h3",{id:"less-or-equal-than-"},"Less or equal than (<=)"),(0,i.kt)("h4",{id:"example-1-3"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{1 <= 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h3",{id:"greater-than-"},"Greater than (>)"),(0,i.kt)("h4",{id:"example-1-4"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{1 > 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"false\n")),(0,i.kt)("h3",{id:"greater-or-equal-than-"},"Greater or equal than (>=)"),(0,i.kt)("h4",{id:"example-1-5"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{5 >= 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h3",{id:"detect-alphabetical-order-with----"},"Detect alphabetical order with <, >, <=, >="),(0,i.kt)("h4",{id:"example-1-6"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - log:\n      message: \"#{'Adam' < 'Zacharias'}\"\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h3",{id:"regular-expression-matching-matches"},"Regular expression matching (matches)"),(0,i.kt)("h4",{id:"example-1-7"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - log:\n      message: \"#{'5.0067' matches '^-?\\\\d+(\\\\.\\\\d{2})?$'}\"\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"false\n")),(0,i.kt)("h2",{id:"logical-operators"},"Logical operators"),(0,i.kt)("h3",{id:"and"},"and"),(0,i.kt)("h4",{id:"example-1-8"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{true and false}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"false\n")),(0,i.kt)("h3",{id:"or"},"or"),(0,i.kt)("h4",{id:"example-1-9"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{true or false}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\n")),(0,i.kt)("h3",{id:"not-"},"not (!)"),(0,i.kt)("h4",{id:"example-1-10"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{!true}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"false\n")),(0,i.kt)("h2",{id:"mathematical-operators"},"Mathematical operators"),(0,i.kt)("h3",{id:"addition-and-subtraction"},"Addition and subtraction"),(0,i.kt)("h4",{id:"example-1---addition"},"Example 1 - Addition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{1 + 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2\n")),(0,i.kt)("h4",{id:"example-2---subtraction"},"Example 2 - Subtraction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{10 - 1}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"9\n")),(0,i.kt)("h4",{id:"example-3---addition-an-subtraction"},"Example 3 - Addition an subtraction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{25 - 5 + 10}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"30\n")),(0,i.kt)("h4",{id:"example-4---string-concatenation"},"Example 4 - String concatenation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - log:\n      message: \"#{'Hello ' + 'World!'}\"\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Hello World!\n")),(0,i.kt)("h3",{id:"multiplication-and-division"},"Multiplication and division"),(0,i.kt)("h4",{id:"example-1---multiplication"},"Example 1 - Multiplication"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{3 * 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"15\n")),(0,i.kt)("h4",{id:"example-2---negative-multiplication"},"Example 2 - Negative multiplication"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{-1 * 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-5\n")),(0,i.kt)("h4",{id:"example-3---division"},"Example 3 - Division"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{20 / 5}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"4\n")),(0,i.kt)("h4",{id:"example-4---modulus"},"Example 4 - Modulus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'pipeline:\n  - log:\n      message: "#{7 % 4}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"3\n")),(0,i.kt)("h4",{id:"example-5---operator-precedence"},"Example 5 - Operator precedence"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{5 + 4 - 1 * 2}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"7\n")),(0,i.kt)("h4",{id:"example-6---brackets"},"Example 6 - Brackets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{(5 + 4 - 1) * 2}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"16\n")),(0,i.kt)("h2",{id:"assignment"},"Assignment"),(0,i.kt)("h4",{id:"example-1-11"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - set:\n      value: "1"\n      output: "#{vars.counter}"\n  - log:\n      message: "#{vars.counter}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1\n")),(0,i.kt)("h4",{id:"example-2-1"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  counter: 12\npipeline:\n  - set:\n      value: "#{vars.counter + 1}"\n      output: "#{vars.counter}"\n  - log:\n      message: "#{vars.counter}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"13\n")),(0,i.kt)("h2",{id:"working-with-lists-and-maps"},"Working with lists and maps"),(0,i.kt)("h3",{id:"creating-a-new-list"},"Creating a new list"),(0,i.kt)("h4",{id:"example-1---a-new-empty-list"},"Example 1 - A new empty list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  numbers: "#{{}}"\npipeline:\n  - log:\n      message: "#{vars.numbers}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[]\n")),(0,i.kt)("h4",{id:"example-2---a-new-list-with-default-content"},"Example 2 - A new list with default content"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  numbers: "#{{1, 2, 4}}"\npipeline:\n  - log:\n      message: "#{vars.numbers}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[1, 2, 4]\n")),(0,i.kt)("h4",{id:"example-3---a-new-nested-list"},"Example 3 - A new, nested list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  scores: "#{{ {1, 3}, {5, 8} }}"\npipeline:\n  - log:\n      message: "#{vars.scores}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[[1, 3], [5, 8]]\n")),(0,i.kt)("h3",{id:"accessing-lists-and-arrays"},"Accessing lists and arrays"),(0,i.kt)("h4",{id:"example-1-12"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  numbers: "#{{1, 2, 4}}"\npipeline:\n  - log:\n      message: "#{vars.numbers[1]}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2\n")),(0,i.kt)("h3",{id:"creating-a-new-map--dictionary"},"Creating a new map / dictionary"),(0,i.kt)("h4",{id:"example-1---a-new-empty-map"},"Example 1 - A new empty map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  persons: "#{ {:} }"\npipeline:\n  - log:\n      message: "#{vars.persons}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{}\n")),(0,i.kt)("h4",{id:"example-2---a-new-map-with-default-values"},"Example 2 - A new map with default values"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"vars:\n  persons: \"#{ {hanna:'burger', max:'hotdog', julie:'salad'} }\"\npipeline:\n  - log:\n      message: \"#{vars.persons}\"\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{hanna=burger, max=hotdog, julie=salad}\n")),(0,i.kt)("h4",{id:"example-3---a-new-map-with-later-binding"},"Example 3 - A new map with later binding"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars:\n  persons: "#{ {:} }"\npipeline:\n  - log:\n      message: "#{vars.persons[\'Hanna\'] = 23}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{Hanna=23}\n")),(0,i.kt)("h3",{id:"accessing-mapsdictionaries"},"Accessing maps/dictionaries"),(0,i.kt)("h4",{id:"example-1-13"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"vars:\n  persons: \"#{ {hanna:'burger', max:'hotdog', julie:'salad'} }\"\npipeline:\n  - log:\n      message: \"#{vars.persons['max']}\"\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"hotdog\n")),(0,i.kt)("h2",{id:"navigating-objects"},"Navigating objects"),(0,i.kt)("p",null,"A PE can point to values inside an object (or nested data structure), like this JSON for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "person": {\n    "name": "Bart Simpson",\n    "age": 12,\n    "hobbies": [\n      "skateboard",\n      "tv",\n      "pranks"\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"You can navigate any structured object available inside a vars or body scope using the dot operator. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#{person.name}\n")),(0,i.kt)("p",null,"To access a list/array, you can use the index operator ","[","]",":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#{person.hobbies[0]}\n")),(0,i.kt)("h4",{id:"example-1-14"},"Example 1"),(0,i.kt)("p",null,"In this more advanced example, there are different things to mention:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We create an ",(0,i.kt)("strong",{parentName:"li"},"inline map")," as ",(0,i.kt)("strong",{parentName:"li"},"initial vars value"),"."),(0,i.kt)("li",{parentName:"ol"},"Multi line values are done by using ",(0,i.kt)("inlineCode",{parentName:"li"},"'")," (this trims any new line and space character at the beginning and end of the string, which is important to interpret it here as map instead of a string)."),(0,i.kt)("li",{parentName:"ol"},"We ",(0,i.kt)("strong",{parentName:"li"},"set the body")," using the initial vars value using the command ",(0,i.kt)("inlineCode",{parentName:"li"},"set.body")," also with a multi line value."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Multiple")," lines can also be set using ",(0,i.kt)("inlineCode",{parentName:"li"},"|"),". Differently to ",(0,i.kt)("inlineCode",{parentName:"li"},"'")," in this case new lines will be kept so that the output of the body will look exactly as formatted in the value parameter. This is perfect if you want to write a template for example with exact format output as the value looks like."),(0,i.kt)("li",{parentName:"ol"},"There are comments in the configuration. A comment line starts with ",(0,i.kt)("inlineCode",{parentName:"li"},"#"),".")),(0,i.kt)("p",null,"See the official YAML documentation about how to deal with multi-line values. Here is a good summary: ",(0,i.kt)("a",{parentName:"p",href:"https://yaml-multiline.info/"},"https://yaml-multiline.info/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Set inline map as initial body value\nvars: \n   data: \'#{ \n      {\n        person: {\n          name: "Bart Simpson",\n          age: 12,\n          hobbies: {\n            "skateboard",\n            "tv",\n            "pranks"\n          }\n        }\n      }\n    }\'\npipeline:\n  # Set in the body a multiline string\n  - set.body:\n      value: | \n        Name:  #{vars.data.person.name}\n        Age:   #{vars.data.person.age}\n        Hobby: #{vars.data.person.hobbies[0]}\n')),(0,i.kt)("p",null,"Formatted output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Name:  Bart Simpson\nAge:   12\nHobby: skateboard\n")),(0,i.kt)("h2",{id:"filtering"},"Filtering"),(0,i.kt)("p",null,"The PEL can be used to filter lists in an easy way. "),(0,i.kt)("h3",{id:"selection-expression"},"Selection Expression"),(0,i.kt)("p",null,"With the selection syntax you can select a subset of items from a given collection to be returned as new collection by specifying a selection expression."),(0,i.kt)("p",null,"Similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE")," part of an SQL query."),(0,i.kt)("p",null,"The syntax is like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"collectionName.?[selectionExpression]\n")),(0,i.kt)("p",null,"Whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionName")," is the variable name of the collection (can be an array, map, list, aso.) and ",(0,i.kt)("inlineCode",{parentName:"p"},"selectionExpression")," is the expression which selects the items to be returned from the list."),(0,i.kt)("h4",{id:"example-1-15"},"Example 1"),(0,i.kt)("p",null,"Lets assume we have a collection of entities like this stored in the body:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'[\n  {\n    "person": {\n      "name": "Bart Simpson",\n      "age": 12,\n      "hobbies": [\n        "skateboard",\n        "tv",\n        "pranks"\n      ]\n    }\n  },\n  {\n    "person": {\n      "name": "Maggie Simpson",\n      "age": 1,\n      "hobbies": [\n        "drinking milk",\n        "crawling",\n        "crying"\n      ]\n    }\n  }\n]\n')),(0,i.kt)("p",null,"Then, we can select a subset of the entries using a selection like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - log:\n      message: \"#{body.?[person.name == 'Maggie Simpson']}\"\n")),(0,i.kt)("p",null,"Output would be a ",(0,i.kt)("strong",{parentName:"p"},"sublist")," with the entries matching the criteria:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "person": {\n      "name": "Maggie Simpson",\n      "age": 1,\n      "hobbies": [\n        "drinking milk",\n        "crawling",\n        "crying"\n      ]\n    }\n  }\n]\n')),(0,i.kt)("p",null,"Here is the same example but with the data set embedded into the pipeline in the vars scope:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars: \n   data: \'#{{\n        {\n          person: {\n            name: "Bart Simpson",\n            age: 12,\n            hobbies: {\n              "skateboard",\n              "tv",\n              "pranks"\n            }\n          }\n        },\n        {\n          person: {\n            name: "Maggie Simpson",\n            age: 1,\n            hobbies: {\n              "drinking milk",\n              "crawling",\n              "crying"\n            }\n          }\n        }\n      }}\'\npipeline:\n  - log:\n      message: "#{vars.data.?[person.name == \'Maggie Simpson\']}"\n')),(0,i.kt)("h3",{id:"projection-expression"},"Projection Expression"),(0,i.kt)("p",null,"With the projection syntax you can select specific property values out from a collection of objects."),(0,i.kt)("p",null,"Similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," part of an SQL query."),(0,i.kt)("p",null,"The syntax is like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"collectionName.![projectionExpression]\n")),(0,i.kt)("p",null,"Whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionName")," is the variable name of the collection (can be an array, map, list, aso.) and ",(0,i.kt)("inlineCode",{parentName:"p"},"projectionExpression")," is the expression which selects the properties to be returned from each object in the list."),(0,i.kt)("h4",{id:"example-1-16"},"Example 1"),(0,i.kt)("p",null,"Lets assume we have a collection of entities like this stored in the body:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'[\n  {\n    "person": {\n      "name": "Bart Simpson",\n      "age": 12,\n      "hobbies": [\n        "skateboard",\n        "tv",\n        "pranks"\n      ]\n    }\n  },\n  {\n    "person": {\n      "name": "Maggie Simpson",\n      "age": 1,\n      "hobbies": [\n        "drinking milk",\n        "crawling",\n        "crying"\n      ]\n    }\n  }\n]\n')),(0,i.kt)("p",null,"Then, we can select properties from this collection like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - log:\n      message: "#{body.![person.name]}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"['Bart Simpson', 'Maggie Simpson']\n")),(0,i.kt)("p",null,"And here the example with embedded data set in the vars scope:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'vars: \n   data: \'#{{\n        {\n          person: {\n            name: "Bart Simpson",\n            age: 12,\n            hobbies: {\n              "skateboard",\n              "tv",\n              "pranks"\n            }\n          }\n        },\n        {\n          person: {\n            name: "Maggie Simpson",\n            age: 1,\n            hobbies: {\n              "drinking milk",\n              "crawling",\n              "crying"\n            }\n          }\n        }\n      }}\'\npipeline:\n  - log:\n      message: "#{vars.data.![person.name]}"\n')),(0,i.kt)("h2",{id:"pel-utils"},"PEL Utils"),(0,i.kt)("p",null,"Inside a PE you can use built-in utils as helpers to simplify work."),(0,i.kt)("p",null,"A reference about available PEL Utils can be found in this section: ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/utils"},"PEL Utils Reference"),"."),(0,i.kt)("h4",{id:"example-1-17"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{5}","{5}":!0},'vars:\n  cities: "Munich, Bratislava, New York"\npipeline:\n  - log: \n      message: "#{@list.size(vars.cities)}"\n')),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"3\n")),(0,i.kt)("h4",{id:"example-2-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - log: \n      message: \"#{@text.lang('Hallo, Herr Meier!')}\"\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"GERMAN\n")))}d.isMDXComponent=!0}}]);
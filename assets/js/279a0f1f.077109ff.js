"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[5288],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),m=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(t),d=r,h=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=c;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var m=2;m<o;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},142:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var a=t(7462),r=(t(7294),t(3905));const o={},s="CSV to JSON Transformer",l={unversionedId:"guides/transformers/csv2json",id:"guides/transformers/csv2json",isDocsHomePage:!1,title:"CSV to JSON Transformer",description:"The transformer command transform.csv.json expects a CSV file which complies with the RFC4189 standard in the body or as input parameter of the command and converts it to a JSON document which can then be used for further processing.",source:"@site/docs/guides/transformers/020_csv2json.md",sourceDirName:"guides/transformers",slug:"/guides/transformers/csv2json",permalink:"/docs/guides/transformers/csv2json",editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/transformers/020_csv2json.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/guides/transformers/basics"},next:{title:"XML to JSON Transformer",permalink:"/docs/guides/transformers/xml2json"}},i=[{value:"Example 1: Arrays output format",id:"example-1-arrays-output-format",children:[],level:2},{value:"Example 2: Headers in rows",id:"example-2-headers-in-rows",children:[],level:2},{value:"Example 3: Hide counter fields",id:"example-3-hide-counter-fields",children:[],level:2},{value:"Example 4: Objects output format",id:"example-4-objects-output-format",children:[],level:2},{value:"Example 5: Set CSV as input param",id:"example-5-set-csv-as-input-param",children:[],level:2},{value:"Example 6: List as input",id:"example-6-list-as-input",children:[],level:2}],m={toc:i};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"csv-to-json-transformer"},"CSV to JSON Transformer"),(0,r.kt)("p",null,"The transformer command ",(0,r.kt)("inlineCode",{parentName:"p"},"transform.csv.json")," expects a CSV file which complies with the ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc4180"},"RFC4189")," standard in the body or as ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," parameter of the command and converts it to a JSON document which can then be used for further processing."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"../../api/commands#transformcsvjson-v1"},"commands reference")," for details about the available parameters of this command."),(0,r.kt)("h2",{id:"example-1-arrays-output-format"},"Example 1: Arrays output format"),(0,r.kt)("p",null,"If you use the transformer without any additional parameters, the JSON output will contain a nested arrays format for the rows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  # Set the CSV in the body\n  - set.body:\n      value: |\n        "firstName","lastName","age"\n        "Max","Smith","38"\n        "Susann","Mayr Wan","44\n\n  - transform.csv.json:\n')),(0,r.kt)("p",null,"The default output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columnsCount": 3,\n  "rowsCount": 2,\n  "headers": ["firstName","lastName","age"],\n  "rows": [\n    ["Max","Smith","38"],\n    ["Susann","Mayr Wan","44"]\n  ]\n}\n\n')),(0,r.kt)("h2",{id:"example-2-headers-in-rows"},"Example 2: Headers in rows"),(0,r.kt)("p",null,"By default the column header names of the CSV will be shown in an extra field ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," of the resulting JSON."),(0,r.kt)("p",null,"It is also possible to have these header names as part of the rows array and skip the extra ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  # Set the CSV in the body\n  - set.body:\n      value: |\n        "firstName","lastName","age"\n        "Max","Smith","38"\n        "Susann","Mayr Wan","44"\n\n  - transform.csv.json:\n      showHeadersField: false\n')),(0,r.kt)("p",null,"The output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columnsCount": 3,\n  "rowsCount": 3,\n  "rows": [\n    ["firstName","lastName","age"],\n    ["Max","Smith","38"],\n    ["Susann","Mayr Wan","44"]\n  ]\n}\n\n')),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"rowsCount")," now also counts the header line."))),(0,r.kt)("h2",{id:"example-3-hide-counter-fields"},"Example 3: Hide counter fields"),(0,r.kt)("p",null,"You can also hide all extra fields."),(0,r.kt)("p",null,"Here you can see the most simple output possible:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  # Set the CSV in the body\n  - set.body:\n      value: |\n        "firstName","lastName","age"\n        "Max","Smith","38"\n        "Susann","Mayr Wan","44"\n\n  - transform.csv.json:\n      showHeadersField: false\n      showColumnsCountField: false\n      showRowsCountField: false\n')),(0,r.kt)("p",null,"The output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "rows": [\n    ["firstName","lastName","age"],\n    ["Max","Smith","38"],\n    ["Susann","Mayr Wan","44"]\n  ]\n}\n\n')),(0,r.kt)("h2",{id:"example-4-objects-output-format"},"Example 4: Objects output format"),(0,r.kt)("p",null,"In some cases it is required, to have each row output as a JSON object with the header names as key."),(0,r.kt)("p",null,"To do so, you need to set the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"rowsFormat")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"objects"),", then the JSON output will contain an array of JSON objects:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  # Set the CSV in the body\n  - set.body:\n      value: |\n        "firstName","lastName","age"\n        "Max","Smith","38"\n        "Susann","Mayr Wan","44"\n\n  - transform.csv.json:\n      rowsFormat: "objects" # Can be "objects" or "arrays" (default).\n')),(0,r.kt)("p",null,"The output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columnsCount": 3,\n  "rowsCount": 2,\n  "headers": ["firstName","lastName","age"],\n  "rows": [\n    {\n      "firstName": "Max",\n      "lastName": "Smith",\n      "age": "38"\n    },\n    {\n      "firstName": "Susann",\n      "lastName": "Mayr Wan",\n      "age": "44"\n    }\n  ]\n}\n\n')),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that this output format creates a much bigger JSON document. So if possible, you should prefer to work with the default rows format ",(0,r.kt)("inlineCode",{parentName:"p"},"arrays"),".  "))),(0,r.kt)("h2",{id:"example-5-set-csv-as-input-param"},"Example 5: Set CSV as input param"),(0,r.kt)("p",null,"Instead of reading the CSV from the body, you can also pass it as ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," param to the command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n\n  - transform.csv.json:\n      input: |\n        "firstName","lastName","age"\n        "Max","Smith","38"\n        "Susann","Mayr Wan","44"\n')),(0,r.kt)("p",null,"The output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columnsCount": 3,\n  "rowsCount": 2,\n  "headers": ["firstName","lastName","age"],\n  "rows": [\n    ["Max","Smith","38"],\n    ["Susann","Mayr Wan","44"]\n  ]\n}\n')),(0,r.kt)("h2",{id:"example-6-list-as-input"},"Example 6: List as input"),(0,r.kt)("p",null,"In this example you can see that it is also possible to define a simple list as input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n\n  - transform.csv.json:\n      hasHeadersLine: false\n      input: |\n        row1\n        row2\n        row3\n")),(0,r.kt)("p",null,"The output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columnsCount": 1,\n  "rowsCount": 3,\n  "rows": [\n    ["row1"],\n    ["row2"],\n    ["row3"]\n  ]\n}\n')))}p.isMDXComponent=!0}}]);